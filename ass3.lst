     1                                  STKSZ equ 16396
     2                                  droneSPP equ 20
     3                                  targetSPP equ 12
     4                                  SPP	equ	8
     5                                    global DronesArray
     6                                    global numberOfDrones
     7                                    global target_x
     8                                    global target_y
     9                                    global maxDistance
    10                                    global seed
    11                                    global numOfCycles
    12                                    global stepsToPrint
    13                                    global GRandomFlaot
    14                                    global IDOfDrone
    15                                  %macro	exit 2
    16                                  	mov	ebx, %2
    17                                  	mov	eax, %1
    18                                  	int	0x80
    19                                  %endmacro
    20                                  section	.rodata ; const data
    21 00000000 256400                  format_string1: db "%d" , 0 
    22 00000003 257300                  format_string12: db "%s" , 0 
    23 00000006 25640A00                format_string2: db "%d" ,10, 0 
    24 0000000A 25660A00                format_string3: db "%f",10 , 0
    25 0000000E 252E31660A00            format_string4: db "%.1f" ,10 , 0
    26 00000014 FFFF                    MAXINT: dw 0xFFFF
    27 00000016 0000000000004940        var50: dq 50.0
    28 0000001E 0000000000000040        var2: dq 2.0
    29 00000026 0000000000807640        var360: dq 360.0
    30                                  %xdefine droneSize 20
    31                                  ;%xdefine MAXINT 65535
    32                                  
    33                                  
    34                                  section	.bss  ;lo m2ot7al
    35 00000000 <res 00000004>              CURR:	resd	1
    36 00000004 <res 00000004>              stackHeadP: resd 1
    37 00000008 <res 00000004>              SPMAIN:	resd	1
    38                                  
    39                                  section .data ; mshtanem
    40 00000000 00000000                    numberOfDrones: dd 0
    41 00000004 00000000                    numOfCycles: dd 0
    42 00000008 00000000                    stepsToPrint: dd 0
    43 0000000C 00000000                    maxDistance: dd 0
    44 00000010 00000000                    seed: dd 0
    45 00000014 00000000                    DronesArray: dd 0
    46 00000018 00000000                    tempDronearray: dd 0
    47 0000001C 00000000                    stackP: dd 0
    48 00000020 00000000                    tmpStackP: dd 0
    49 00000024 00000000                    RandomFlaot: dd 0
    50 00000028 00000000                    GRandomFlaot: dd 0 ; global
    51 0000002C 00000000                    printThread: dd 0
    52 00000030 00000000                    targetThread: dd 0
    53 00000034 00000000                    schedulerThread: dd 0
    54 00000038 00000000                    target_x: dd 0
    55 0000003C 00000000                    target_y: dd 0
    56 00000040 00000000                    IDOfDrone: dd 0
    57 00000044 01000000                    counter: dd 1
    58                                      
    59                                  
    60                                  
    61                                  section .text
    62                                    align 16
    63                                  
    64                                  
    65                                    global main
    66                                  
    67                                    extern printFunc
    68                                    extern SchFunc
    69                                    extern funcDrone
    70                                    extern targetFunc
    71                                    extern createTarget1
    72                                    extern printf
    73                                    extern fprintf 
    74                                    extern calloc
    75                                    extern malloc 
    76                                    extern free 
    77                                    extern sscanf
    78                                  
    79                                  
    80                                    global resumeSCH
    81                                    global SchFunc
    82                                    global end_co
    83                                    global scalingProc
    84                                    global resumeTarget
    85                                    global resumePrinter
    86                                    global resumeDrone
    87                                    global LFSR
    88                                    global scalingAngle
    89                                  
    90                                  
    91                                  
    92                                  main:
    93 00000000 55                          push ebp
    94 00000001 89E5                        mov ebp ,esp 
    95 00000003 60                          pushad
    96                                  
    97 00000004 8B750C                      mov esi , [ebp+12]; **argv
    98 00000007 BB00000000                  mov ebx , 0 ; counter
    99                                  loop:
   100 0000000C 43                          inc ebx 
   101 0000000D 8B049E                      mov eax, [esi +ebx *4]
   102 00000010 85C0                        test eax, eax  ;check if null
   103 00000012 0F8487000000                je initDrone
   104 00000018 83FB01                      cmp ebx , 1 
   105 0000001B 7416                        je arg1
   106 0000001D 83FB02                      cmp ebx , 2
   107 00000020 7426                        je arg2
   108 00000022 83FB03                      cmp ebx , 3
   109 00000025 7436                        je arg3
   110 00000027 83FB04                      cmp ebx , 4 
   111 0000002A 7446                        je arg4
   112 0000002C 83FB05                      cmp ebx , 5
   113 0000002F 7456                        je arg5
   114 00000031 EBD9                        jmp loop
   115                                  arg1:
   116 00000033 68[00000000]                push dword numberOfDrones
   117 00000038 68[00000000]                push format_string1
   118 0000003D 50                          push  eax 
   119 0000003E E8(00000000)                call sscanf
   120 00000043 83C40C                      add esp , 12
   121 00000046 EBC4                        jmp loop
   122                                  arg2:
   123 00000048 68[04000000]                push dword numOfCycles
   124 0000004D 68[00000000]                push format_string1
   125 00000052 50                          push  eax 
   126 00000053 E8(00000000)                call sscanf
   127 00000058 83C40C                      add esp , 12
   128 0000005B EBAF                        jmp loop
   129                                  arg3:
   130 0000005D 68[08000000]                push dword stepsToPrint
   131 00000062 68[00000000]                push format_string1
   132 00000067 50                          push  eax 
   133 00000068 E8(00000000)                call sscanf
   134 0000006D 83C40C                      add esp , 12
   135 00000070 EB9A                        jmp loop
   136                                  
   137                                  arg4:
   138 00000072 68[0C000000]                push dword maxDistance
   139 00000077 68[0A000000]                push format_string3
   140 0000007C 50                          push  eax 
   141 0000007D E8(00000000)                call sscanf
   142 00000082 83C40C                      add esp , 12
   143                                      ;mov  eax , maxDistance
   144                                      ;fld dword [eax]
   145                                      ;sub esp ,8
   146                                      ;fstp qword [esp]                         ;push dword [maxDistance]
   147                                      ;push format_string4
   148                                      ;call printf
   149                                      ;add esp , 12
   150 00000085 EB85                        jmp loop
   151                                  arg5:
   152 00000087 68[10000000]                push dword seed
   153 0000008C 68[00000000]                push format_string1
   154 00000091 50                          push  eax 
   155 00000092 E8(00000000)                call sscanf
   156 00000097 83C40C                      add esp , 12
   157 0000009A E96DFFFFFF                  jmp loop 
   158                                  initDrone:
   159 0000009F E8(00000000)                call createTarget1
   160 000000A4 A1[00000000]                mov dword eax , [numberOfDrones] ; intialize the drones
   161 000000A9 BB14000000                  mov ebx , 20
   162 000000AE F7E3                        mul ebx;push ebx  ; flag11
   163 000000B0 50                          push eax
   164 000000B1 E8(00000000)                call malloc
   165 000000B6 83C404                      add esp , 4 
   166 000000B9 A3[14000000]                mov dword [DronesArray] , eax 
   167 000000BE A3[18000000]                mov dword [tempDronearray],eax
   168                                       ;for here init done without stack for drones
   169 000000C3 31C9                         xor ecx,ecx
   170                                  fillDrones:;here fill x,y,a,s
   171 000000C5 E879000000                  call LFSR
   172 000000CA E8D0000000                  call scalingProc ; x
   173 000000CF D905[28000000]              fld dword [GRandomFlaot]
   174 000000D5 D91D[18000000]              fstp dword [tempDronearray]
   175 000000DB 8B1D[28000000]              mov dword ebx, [GRandomFlaot]
   176 000000E1 E85D000000                  call LFSR
   177 000000E6 E8B4000000                  call scalingProc ; y
   178 000000EB D905[28000000]              fld dword [GRandomFlaot]
   179 000000F1 D91D[1C000000]              fstp dword [tempDronearray+4]
   180 000000F7 E847000000                  call LFSR
   181 000000FC E8F4000000                 call scalingAngle ; angle
   182 00000101 D905[28000000]              fld dword [GRandomFlaot]
   183 00000107 D91D[20000000]              fstp dword [tempDronearray+8]
   184 0000010D E831000000                  call LFSR
   185 00000112 E888000000                  call scalingProc ; speed
   186 00000117 D905[28000000]              fld dword [GRandomFlaot]
   187 0000011D D91D[24000000]              fstp dword [tempDronearray+12]
   188 00000123 C705[28000000]0000-         mov dword [tempDronearray+16] , 0 ;destroyed targets
   188 0000012B 0000               
   189 0000012D 83C014                      add eax,20
   190 00000130 A3[18000000]                mov dword [tempDronearray],eax
   191 00000135 41                          inc ecx
   192 00000136 3B0D[00000000]              cmp dword ecx , [numberOfDrones]
   193 0000013C 7C87                        jl fillDrones
   194 0000013E E9E7000000                  jmp initStack
   195                                  ;--;-------------------------------------------------------------------------------------- hereeee 
   196                                  LFSR:
   197 00000143 55                         push ebp
   198 00000144 89E5                        mov ebp , esp
   199 00000146 60                         pushad
   200                                     ;xor esi,esi
   201 00000147 BE01000000                 mov esi,1
   202                                  lfsrloop:
   203 0000014C 9C                          pushfd
   204 0000014D 46                          inc esi
   205 0000014E A1[10000000]                mov eax, [seed]
   206 00000153 8B1D[10000000]              mov ebx ,[seed]
   207 00000159 8B0D[10000000]              mov ecx ,[seed]
   208 0000015F 8B15[10000000]              mov edx ,[seed]
   209 00000165 66C1E800                    shr ax , 0
   210 00000169 66C1EB02                    shr bx , 2
   211 0000016D 6631D8                      xor ax , bx
   212 00000170 66C1E903                    shr cx , 3
   213 00000174 66C1EA05                    shr dx , 5
   214 00000178 6631C8                      xor ax , cx
   215 0000017B 6631D0                      xor ax , dx 
   216 0000017E 8B0D[10000000]              mov ecx , [seed]
   217 00000184 66C1E00F                    shl ax ,15
   218 00000188 66D1E9                      shr cx , 1
   219 0000018B 6609C8                      or ax , cx
   220 0000018E 66A3[10000000]              mov [seed],ax
   221 00000194 9D                          popfd
   222 00000195 83FE10                      cmp dword esi , 16
   223 00000198 7EB2                        jle lfsrloop
   224                                  
   225 0000019A 61                          popad 
   226 0000019B 89EC                        mov esp , ebp  ; error
   227 0000019D 5D                          pop ebp
   228 0000019E C3                          ret
   229                                  ;---------------------------------------------------------------------------------------
   230                                  scalingProc: ; and speed
   231 0000019F 55                          push ebp
   232 000001A0 89E5                        mov ebp , esp
   233 000001A2 60                          pushad
   234 000001A3 DB05[10000000]              fild dword [seed] ;we used filed not fld to converse from integer to float(example : if we got 2 we want 2.0)
   235 000001A9 A1[14000000]                mov dword eax, [MAXINT]
   236 000001AE A3[24000000]                mov dword [RandomFlaot] , eax
   237 000001B3 DA35[24000000]              fidiv dword [RandomFlaot] ; seed /MaxInt
   238 000001B9 C705[28000000]6400-         mov dword [GRandomFlaot] , 100
   238 000001C1 0000               
   239 000001C3 DA0D[28000000]              fimul dword [GRandomFlaot]
   240 000001C9 D91D[28000000]              fstp dword [GRandomFlaot]
   241 000001CF E86FFFFFFF                  call LFSR               ; get a random number
   242 000001D4 DB05[10000000]              fild dword [seed]        ;load seed
   243 000001DA DA35[14000000]              fidiv dword [MAXINT]    ;divide by maxint
   244 000001E0 DD05[16000000]              fld qword [var50]
   245 000001E6 DEC9                        fmulp 
   246 000001E8 D9E1                        fabs
   247 000001EA D91D[28000000]              fstp dword [GRandomFlaot]
   248 000001F0 61                          popad 
   249 000001F1 89EC                        mov esp , ebp  ; error
   250 000001F3 5D                          pop ebp
   251 000001F4 C3                          ret
   252                                  ;--------------------------------------------------------------------------------------
   253                                  
   254                                  scalingAngle:
   255 000001F5 55                          push ebp
   256 000001F6 89E5                        mov ebp , esp
   257 000001F8 60                          pushad
   258 000001F9 DB05[10000000]              fild dword [seed] ;we used filed not fld to converse from integer to float(example : if we got 2 we want 2.0)
   259 000001FF A1[14000000]                mov dword eax,[MAXINT]
   260 00000204 A3[24000000]                mov dword [RandomFlaot] ,eax
   261 00000209 DA35[24000000]              fidiv dword [RandomFlaot] ; seed /MaxInt
   262 0000020F C705[28000000]6801-         mov dword [GRandomFlaot] , 360
   262 00000217 0000               
   263 00000219 DA0D[28000000]            fimul dword [GRandomFlaot]
   264 0000021F D91D[28000000]             fstp dword [GRandomFlaot]
   265                                  
   266 00000225 61                          popad 
   267 00000226 89EC                        mov esp , ebp  ; error
   268 00000228 5D                          pop ebp
   269 00000229 C3                          ret
   270                                  ;--------------------------------------------------------------------------------------
   271                                  
   272                                  initStack:
   273 0000022A B80C400000                  mov dword eax , STKSZ
   274 0000022F 8B1D[00000000]              mov  dword ebx , [numberOfDrones]
   275 00000235 50                          push  eax 
   276 00000236 53                          push ebx
   277 00000237 E8(00000000)                call calloc
   278 0000023C 83C408                      add esp , 8
   279 0000023F A3[1C000000]                mov [stackP] , eax
   280 00000244 B901000000                  mov ecx , 1
   281                                  initDroneStack:
   282 00000249 A3[20000000]                mov [tmpStackP],eax 
   283 0000024E 8908                        mov [eax] ,ecx
   284 00000250 83C004                      add eax ,4
   285 00000253 C700[00000000]              mov dword [eax], funcDrone; extern flag
   286 00000259 83C004                      add eax , 4
   287 0000025C 89C3                        mov ebx , eax
   288 0000025E 81C30C400000                add ebx,STKSZ
   289 00000264 83C304                      add ebx , 4
   290 00000267 8918                        mov [eax],ebx
   291 00000269 891D[04000000]              mov [stackHeadP] , ebx
   292 0000026F 8B1D[20000000]              mov ebx , [tmpStackP]
   293 00000275 89E6                        mov esi , esp  ; save esp value
   294 00000277 8B6308                      mov esp ,[ebx+8]
   295 0000027A FF7304                      push dword [ebx+4] ; push the func
   296 0000027D 9C                          pushf
   297 0000027E 60                          pusha
   298 0000027F 896308                      mov [ebx+8] , esp
   299 00000282 89F4                        mov esp , esi
   300 00000284 A1[04000000]                mov eax , [stackHeadP]
   301 00000289 41                          inc ecx 
   302 0000028A 3B0D[00000000]              cmp ecx , [numberOfDrones]
   303 00000290 7EB7                        jng initDroneStack
   304                                  
   305                                  ;--------------------------------------------------------------------------
   306                                  initPrinter:
   307 00000292 B80C400000                  mov  eax , STKSZ
   308 00000297 BB01000000                  mov dword  ebx , 1
   309 0000029C 50                          push  eax 
   310 0000029D 53                          push ebx
   311 0000029E E8(00000000)                call calloc
   312 000002A3 83C408                      add esp , 8
   313 000002A6 A3[2C000000]                mov [printThread] ,eax
   314 000002AB C70001000000                mov dword [eax] , 1
   315 000002B1 83C004                      add eax , 4
   316 000002B4 C700[00000000]              mov dword [eax] ,printFunc
   317 000002BA 83C004                      add eax ,4 
   318 000002BD 89C1                        mov ecx , eax 
   319 000002BF 81C10C400000                add ecx , STKSZ
   320 000002C5 83E908                      sub ecx , 8 
   321 000002C8 8908                        mov [eax] ,ecx
   322 000002CA A1[2C000000]                mov eax , [printThread]
   323 000002CF 89E6                        mov esi , esp  ;esi have the current stack pointer 
   324 000002D1 8B6008                      mov esp , [eax+8] ; esp point to the printer stack
   325 000002D4 FF7004                      push dword [eax+4]
   326 000002D7 9C                          pushf
   327 000002D8 60                          pusha
   328 000002D9 896008                      mov [eax+8] ,esp 
   329 000002DC 89F4                        mov esp ,esi
   330                                  
   331                                      ;finish the printer
   332                                      ;same as printer
   333                                  initTarget:
   334 000002DE B80C400000                  mov  eax , STKSZ
   335 000002E3 BB01000000                  mov dword  ebx , 1
   336 000002E8 50                          push  eax 
   337 000002E9 53                          push ebx
   338 000002EA E8(00000000)                call calloc
   339 000002EF 83C408                      add esp , 8
   340 000002F2 A3[30000000]                mov [targetThread] ,eax
   341 000002F7 C70001000000                mov dword [eax] , 1
   342 000002FD 83C004                      add eax , 4
   343 00000300 C700[00000000]              mov dword [eax] ,targetFunc
   344 00000306 83C004                      add eax ,4 
   345 00000309 89C1                        mov ecx , eax 
   346 0000030B 81C10C400000                add ecx , STKSZ
   347 00000311 83E908                      sub ecx , 8 
   348 00000314 8908                        mov [eax] ,ecx
   349 00000316 A1[30000000]                mov eax , [targetThread]
   350 0000031B 89E6                        mov esi , esp  ;esi have the current stack pointer 
   351 0000031D 8B6008                      mov esp , [eax+8] ; esp point to the printer stack
   352 00000320 FF7004                      push dword [eax+4]
   353 00000323 9C                          pushf
   354 00000324 60                          pusha
   355 00000325 896008                      mov [eax+8] ,esp 
   356 00000328 89F4                        mov esp ,esi
   357                                  
   358                                  initScheduler:
   359 0000032A B80C400000                  mov  eax ,STKSZ
   360 0000032F BB01000000                  mov dword  ebx , 1
   361 00000334 50                          push  eax 
   362 00000335 53                          push ebx
   363 00000336 E8(00000000)                call calloc
   364 0000033B 83C408                      add esp , 8
   365 0000033E A3[34000000]                mov [schedulerThread] , eax 
   366 00000343 C70001000000                mov dword [eax] ,1
   367 00000349 83C004                      add eax , 4
   368 0000034C C700[00000000]              mov dword [eax] , SchFunc 
   369 00000352 83C004                      add eax , 4
   370 00000355 89C1                        mov ecx , eax 
   371 00000357 81C10C400000                add ecx , STKSZ
   372 0000035D 83E908                      sub ecx , 8 
   373 00000360 8908                        mov [eax] ,ecx
   374 00000362 A1[34000000]                mov eax , [schedulerThread]
   375 00000367 89E6                        mov esi , esp  ;esi have the current stack pointer 
   376 00000369 8B6008                      mov esp , [eax+8] ; esp point to the printer stack
   377 0000036C FF7004                      push dword [eax+4]
   378 0000036F 9C                          pushf
   379 00000370 60                          pusha
   380 00000371 896008                      mov [eax+8] ,esp 
   381 00000374 89F4                        mov esp ,esi
   382 00000376 E80C000000                  call start_co_from_c
   383                                      exit 1 ,0
   383 0000037B BB00000000          <1>  mov ebx, %2
   383 00000380 B801000000          <1>  mov eax, %1
   383 00000385 CD80                <1>  int 0x80
   384                                  
   385                                  ; C-callable start of the first co-routine
   386                                  ; from the class material ------------------------------
   387                                  start_co_from_c:
   388 00000387 55                      	push	ebp
   389 00000388 89E5                    	mov	ebp, esp
   390 0000038A 60                      	pusha
   391 0000038B 8925[08000000]          	mov	[SPMAIN], esp             ; Save SP of main code
   392 00000391 8B1D[34000000]          	mov	ebx, [schedulerThread]       ; and pointer to co-routine structure
   393 00000397 EB10                    	jmp	do_resume
   394                                  
   395                                  resume:
   396 00000399 9C                      	pushf			; Save state of caller
   397 0000039A 60                      	pusha
   398 0000039B BA00000000                  mov edx , 0
   399 000003A0 8B15[00000000]          	mov	edx, [CURR]
   400 000003A6 896208                  	mov	[edx+SPP],esp	; Save current SP
   401                                  do_resume:
   402 000003A9 8B6308                  	mov	esp, [ebx+SPP]  ; Load SP for resumed co-routine
   403 000003AC 891D[00000000]          	mov	[CURR], ebx
   404 000003B2 61                      	popa			; Restore resumed co-routine state
   405 000003B3 9D                      	popf
   406 000003B4 C3                      	ret             ; "return" to resumed co-routine!	
   407                                  
   408                                  resumeDrone:
   409 000003B5 A1[40000000]                mov eax ,[IDOfDrone] ; extern
   410 000003BA BB0C400000                  mov ebx , STKSZ
   411 000003BF F7E0                        mul eax
   412 000003C1 0305[1C000000]              add eax ,[stackP]
   413 000003C7 89C3                        mov ebx ,eax 
   414 000003C9 EBCE                        jmp resume
   415                                  
   416                                  resumePrinter:
   417 000003CB 8B1D[2C000000]              mov ebx , [printThread]
   418 000003D1 EBC6                        jmp resume
   419                                  
   420                                  resumeTarget:
   421 000003D3 8B1D[30000000]              mov ebx , [targetThread]
   422 000003D9 EBBE                        jmp resume
   423                                  
   424                                  resumeSCH:
   425 000003DB 8B1D[34000000]              mov ebx , [schedulerThread]
   426 000003E1 EBB6                        jmp resume
   427                                  
   428                                  end_co:
   429 000003E3 8B25[08000000]          	mov	esp, [SPMAIN]            ; Restore state of main code
   430 000003E9 61                      	popa
   431 000003EA C3                      	ret
   432                                  ;--------------------------------------------------------------------------
   433                                      
